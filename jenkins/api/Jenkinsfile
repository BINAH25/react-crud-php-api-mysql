pipeline {
    agent any

    environment {
        registryCredential = 'ecr:eu-west-1:awscreds'
        appRegistry = "677276091734.dkr.ecr.eu-west-1.amazonaws.com/lamp-stack-backend-php"
        backendRegistry = "https://677276091734.dkr.ecr.eu-west-1.amazonaws.com"
        cluster = 'vprofile'
        service = 'vprofileappsvc'
    }

    stages {
        stage('Fetch code') {
            steps {
                git branch: 'main', url: 'https://github.com/BINAH25/react-crud-php-api-mysql.git'
            }
        }

        stage('Check for backend changes') {
            steps {
                script {
                    def changedFiles = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()
                    def apiChanged = changedFiles.split("\n").any { it.startsWith("api/") }
                    
                    if (!apiChanged) {
                        echo "No changes detected in backend. Skipping build."
                        currentBuild.result = 'SUCCESS'
                        error("Skipping remaining stages.")  // Stop pipeline execution
                    } else {
                        echo "Changes detected in backend. Proceeding with the build."
                    }
                }
            }
        }

        stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage('Buid App Image') {
            steps {
                script {
                    dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./api/")
                }
            }
        }


        stage('Scan Image with Trivy') {
            steps {
                script {
                    sh """
                        trivy image --format table --severity HIGH,CRITICAL ${appRegistry}:$BUILD_NUMBER || exit 1
                    """
                }
            }
        }


        stage('Upload Image to ECR') {
            steps {
                script {
                    docker.withRegistry( backendRegistry, registryCredential ){
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }

        
    }
}
